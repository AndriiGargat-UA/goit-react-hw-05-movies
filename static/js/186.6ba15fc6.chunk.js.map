{"version":3,"file":"static/js/186.6ba15fc6.chunk.js","mappings":"yNAuDA,UAnDgB,WACd,OAA8BA,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,SAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAiBR,OAfAE,EAAAA,EAAAA,YAAU,WACRL,EAAU,WACV,IAAMM,EAAe,mCAAG,8GAEGC,EAAAA,EAAAA,IAAkBJ,GAFrB,OAEdK,EAFc,OAGpBV,EAAWU,GACXR,EAAU,YAJU,gDAMpBA,EAAU,YACVE,EAAS,KAAMO,SAPK,yDAAH,qDAUrBH,GACD,GAAE,CAACH,IAEW,YAAXJ,GACK,uCAGM,aAAXA,GACK,0DAAkCE,KAG5B,aAAXF,EACqB,IAAnBF,EAAQa,QACH,4EAIP,wBACGb,EAAQc,KAAI,SAAAC,GACX,IAAQC,EAAwBD,EAAxBC,GAAIC,EAAoBF,EAApBE,OAAQC,EAAYH,EAAZG,QACpB,OACE,2BACE,qCAAaD,MACb,uBAAIC,MAFGF,EAKZ,WAfP,CAmBD,C,+MClDKG,EAAU,mCACVC,EAAW,+BAEJC,EAAmB,mCAAG,oGACVC,EAAAA,EAAAA,IAAA,UAClBF,EADkB,uCACqBD,IAFX,cAC3BR,EAD2B,yBAI1BA,EAASY,KAAKC,SAJY,2CAAH,qDAOnBC,EAAiB,mCAAG,WAAMnB,GAAN,uFACRgB,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACAd,EADA,oBACmBa,EADnB,oBADQ,cACzBR,EADyB,yBAIxBA,EAASY,MAJe,2CAAH,sDAOjBG,EAAiB,mCAAG,WAAMpB,GAAN,uFACRgB,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACAd,EADA,4BAC2Ba,EAD3B,oBADQ,cACzBR,EADyB,yBAIxBA,EAASY,KAAKI,MAJU,2CAAH,sDAOjBjB,EAAiB,mCAAG,WAAMJ,GAAN,uFACRgB,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACAd,EADA,4BAC2Ba,EAD3B,2BADQ,cACzBR,EADyB,yBAIxBA,EAASY,KAAKC,SAJU,2CAAH,sDAOjBI,EAAgB,mCAAG,WAAMC,GAAN,uFACPP,EAAAA,EAAAA,IAAA,UAClBF,EADkB,iCACeD,EADf,wCACsDU,IAF/C,cACxBlB,EADwB,yBAIvBA,EAASY,KAAKC,SAJS,2CAAH,sDAO7BC,EAAkBK,UAAY,CAC5BxB,QAASwB,IAAAA,QAEXJ,EAAkBI,UAAY,CAC5BxB,QAASwB,IAAAA,QAEXpB,EAAkBoB,UAAY,CAC5BxB,QAASwB,IAAAA,QAEXF,EAAiBE,UAAY,CAC3BD,MAAOC,IAAAA,O","sources":["components/Reviews/Reviews.jsx","services/api.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieReviews } from 'services/api';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [status, setStatus] = useState('start');\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setStatus('pending');\n    const getMovieReviews = async () => {\n      try {\n        const response = await fetchMovieReviews(movieId);\n        setReviews(response);\n        setStatus('resolved');\n      } catch (error) {\n        setStatus('rejected');\n        setError(error.message);\n      }\n    };\n    getMovieReviews();\n  }, [movieId]);\n\n  if (status === 'pending') {\n    return <h2>Loading...</h2>;\n  }\n\n  if (status === 'rejected') {\n    return <h2>Sorry, something went wrong: {error}</h2>;\n  }\n\n  if (status === 'resolved') {\n    if (reviews.length === 0) {\n      return <p>Sorry, we don't have any reviews for this movie</p>;\n    }\n\n    return (\n      <ul>\n        {reviews.map(review => {\n          const { id, author, content } = review;\n          return (\n            <li key={id}>\n              <h3>Author: {author}</h3>\n              <p>{content}</p>\n            </li>\n          );\n        })}\n      </ul>\n    );\n  }\n};\n\nexport default Reviews;\n","import axios from 'axios';\nimport PropTypes from 'prop-types';\n\nconst API_KEY = '7eaebca790602b6b3aca45d915bff38d';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport const fetchTrendingMovies = async () => {\n  const response = await axios.get(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const fetchMovieCredits = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n\nexport const fetchMovieSearch = async query => {\n  const response = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&page=1&query=${query}`\n  );\n  return response.data.results;\n};\n\nfetchMovieDetails.PropTypes = {\n  movieId: PropTypes.string,\n};\nfetchMovieCredits.PropTypes = {\n  movieId: PropTypes.string,\n};\nfetchMovieReviews.PropTypes = {\n  movieId: PropTypes.string,\n};\nfetchMovieSearch.PropTypes = {\n  query: PropTypes.string,\n};\n"],"names":["useState","reviews","setReviews","status","setStatus","error","setError","movieId","useParams","useEffect","getMovieReviews","fetchMovieReviews","response","message","length","map","review","id","author","content","API_KEY","BASE_URL","fetchTrendingMovies","axios","data","results","fetchMovieDetails","fetchMovieCredits","cast","fetchMovieSearch","query","PropTypes"],"sourceRoot":""}