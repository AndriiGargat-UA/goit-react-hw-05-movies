{"version":3,"file":"static/js/387.2a9d6cf7.chunk.js","mappings":"8RAEaA,EAAWC,EAAAA,GAAAA,GAAH,+EAKRC,EAAcD,EAAAA,GAAAA,IAAH,mE,SC2DxB,EA5Da,WACX,OAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,SAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAmBR,OAhBAE,EAAAA,EAAAA,YAAU,WACRL,EAAU,WACV,IAAMM,EAAY,mCAAG,8GAEMC,EAAAA,EAAAA,IAAkBJ,GAFxB,OAEXK,EAFW,OAGjBV,EAAQU,GACRC,QAAQC,IAAIF,GACZR,EAAU,YALO,gDAOjBA,EAAU,YACVE,EAAS,KAAMS,SARE,yDAAH,qDAWlBL,GACD,GAAE,CAACH,IAEW,YAAXJ,GACK,uCAEM,aAAXA,GACK,0DAAkCE,KAG5B,aAAXF,EACkB,IAAhBF,EAAKe,QACA,yEAGP,SAACnB,EAAD,UACGI,EAAKgB,KAAI,SAAAC,GACR,IAAQC,EAAsCD,EAAtCC,GAAIC,EAAkCF,EAAlCE,aAAcC,EAAoBH,EAApBG,KAAMC,EAAcJ,EAAdI,UAChC,OACE,0BACGF,GACC,SAACrB,EAAD,CACEwB,IAAG,UArCE,mCAqCF,OAAoBH,GACvBI,IAAI,oBAGN,SAACzB,EAAD,CAAawB,IAAKE,EAAgBD,IAAI,oBAGxC,uBAAIH,KACJ,uCAAeC,OAXRH,EAcZ,WAvBP,CA2BD,C,sNC7DKO,EAAU,mCACVC,EAAW,+BAEJC,EAAmB,mCAAG,oGACVC,EAAAA,EAAAA,IAAA,UAClBF,EADkB,uCACqBD,IAFX,cAC3Bd,EAD2B,yBAI1BA,EAASkB,KAAKC,SAJY,2CAAH,qDAOnBC,EAAiB,mCAAG,WAAMzB,GAAN,uFACRsB,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACApB,EADA,oBACmBmB,EADnB,oBADQ,cACzBd,EADyB,yBAIxBA,EAASkB,MAJe,2CAAH,sDAOjBnB,EAAiB,mCAAG,WAAMJ,GAAN,uFACRsB,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACApB,EADA,4BAC2BmB,EAD3B,oBADQ,cACzBd,EADyB,yBAIxBA,EAASkB,KAAK7B,MAJU,2CAAH,sDAOjBgC,EAAiB,mCAAG,WAAM1B,GAAN,uFACRsB,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACApB,EADA,4BAC2BmB,EAD3B,2BADQ,cACzBd,EADyB,yBAIxBA,EAASkB,KAAKC,SAJU,2CAAH,sDAOjBG,EAAgB,mCAAG,WAAMC,GAAN,uFACPN,EAAAA,EAAAA,IAAA,UAClBF,EADkB,iCACeD,EADf,wCACsDS,IAF/C,cACxBvB,EADwB,yBAIvBA,EAASkB,KAAKC,SAJS,2CAAH,sDAO7BC,EAAkBI,UAAY,CAC5B7B,QAAS6B,IAAAA,QAEXzB,EAAkByB,UAAY,CAC5B7B,QAAS6B,IAAAA,QAEXH,EAAkBG,UAAY,CAC5B7B,QAAS6B,IAAAA,QAEXF,EAAiBE,UAAY,CAC3BD,MAAOC,IAAAA,O","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  margin-top: 15px;\n  border-top: 1px solid #020c2e;\n`;\n\nexport const ActorAvatar = styled.img`\n  margin: 10px 0 10px 0;\n  width: 150px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCredits } from 'services/api';\nimport avatarNotFound from 'images/profile-not-found.png';\nimport { CastList, ActorAvatar } from './Cast.styled';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [status, setStatus] = useState('start');\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n  const PROFILE_PATH = 'https://image.tmdb.org/t/p/w200';\n\n  useEffect(() => {\n    setStatus('pending');\n    const getMovieCast = async () => {\n      try {\n        const response = await fetchMovieCredits(movieId);\n        setCast(response);\n        console.log(response);\n        setStatus('resolved');\n      } catch (error) {\n        setStatus('rejected');\n        setError(error.message);\n      }\n    };\n    getMovieCast();\n  }, [movieId]);\n\n  if (status === 'pending') {\n    return <h2>Loading...</h2>;\n  }\n  if (status === 'rejected') {\n    return <h2>Sorry, something went wrong: {error}</h2>;\n  }\n\n  if (status === 'resolved') {\n    if (cast.length === 0) {\n      return <p>Sorry, we don't have any cast for this movie</p>;\n    }\n    return (\n      <CastList>\n        {cast.map(actor => {\n          const { id, profile_path, name, character } = actor;\n          return (\n            <li key={id}>\n              {profile_path ? (\n                <ActorAvatar\n                  src={`${PROFILE_PATH}${profile_path}`}\n                  alt=\"profile avatar\"\n                />\n              ) : (\n                <ActorAvatar src={avatarNotFound} alt=\"profile avatar\" />\n              )}\n\n              <p>{name}</p>\n              <p>Character: {character}</p>\n            </li>\n          );\n        })}\n      </CastList>\n    );\n  }\n};\n\nexport default Cast;\n","import axios from 'axios';\nimport PropTypes from 'prop-types';\n\nconst API_KEY = '7eaebca790602b6b3aca45d915bff38d';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport const fetchTrendingMovies = async () => {\n  const response = await axios.get(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const fetchMovieCredits = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n\nexport const fetchMovieSearch = async query => {\n  const response = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&page=1&query=${query}`\n  );\n  return response.data.results;\n};\n\nfetchMovieDetails.PropTypes = {\n  movieId: PropTypes.string,\n};\nfetchMovieCredits.PropTypes = {\n  movieId: PropTypes.string,\n};\nfetchMovieReviews.PropTypes = {\n  movieId: PropTypes.string,\n};\nfetchMovieSearch.PropTypes = {\n  query: PropTypes.string,\n};\n"],"names":["CastList","styled","ActorAvatar","useState","cast","setCast","status","setStatus","error","setError","movieId","useParams","useEffect","getMovieCast","fetchMovieCredits","response","console","log","message","length","map","actor","id","profile_path","name","character","src","alt","avatarNotFound","API_KEY","BASE_URL","fetchTrendingMovies","axios","data","results","fetchMovieDetails","fetchMovieReviews","fetchMovieSearch","query","PropTypes"],"sourceRoot":""}